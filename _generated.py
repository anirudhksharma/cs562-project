
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    

    def process_scans(cur, phi):
    
    #Process the SQL table in multiple scans based on the values of the phi operator.

    #:param cur: Cursor for the connected SQL table.
    #:param phi: Dictionary containing the phi operator values.
    #:return: H table populated with results after all scans.
    
    # Initialize the H table
        h_table = defaultdict(lambda: {'grouping_values': {}, 'aggregates': defaultdict(float)})

    # Perform the scans
        n_scans = len(phi['N'])  # Number of grouping variables determines the number of scans
        for scan_idx in range(n_scans + 1):  # +1 for the initial scan
            print(f"Scan {scan_idx + 1}:")
            cur.execute("SELECT * FROM sales")  # Fetch all rows from the table
            rows = cur.fetchall()

        # Initial scan: Populate grouping values based on 'S'
            if scan_idx == 0:
                for row in rows:
                    key = tuple(row[col] for col in phi['S'] if col in row)
                    if key not in h_table:
                        h_table[key]['grouping_values'] = {col: row[col] for col in phi['S'] if col in row}
                        # Set aggregate columns as empty initially
                        for func in phi['F']:
                            h_table[key]['aggregates'][func] = None
                print(f"H Table after scan {scan_idx + 1}:")
                print(tabulate(
                    [{**{'Group': key}, **h_table[key]['grouping_values']} for key in h_table],
                    headers="keys", tablefmt="psql"
                ))
        # Aggregate scan: Populate aggregate values based on conditions in sigma
            else:
                sigma = phi['sigma'][scan_idx - 1]
                for row in rows:
                    for key, entry in h_table.items():
                        # Evaluate the sigma condition
                        if eval(sigma, {}, {**row, **entry['grouping_values']}):
                            # Update aggregates
                            for func in phi['F']:
                                if func.startswith("sum"):
                                    col = func.split("(")[1].split(")")[0]  # Extract column name
                                    entry['aggregates'][func] = entry['aggregates'].get(func, 0) + row[col]
                                elif func.startswith("avg"):
                                    col = func.split("(")[1].split(")")[0]
                                    entry['aggregates'][func] = entry['aggregates'].get(func, 0) + row[col]
                            # Extend with min, max, count as needed
                print(f"H Table after scan {scan_idx + 1}:")
                print(tabulate(
                    [{**{'Group': key}, **entry['grouping_values'], **entry['aggregates']} for key, entry in h_table.items()],
                    headers="keys", tablefmt="psql"
                ))

        return h_table

    
    phi = {}
    phi['S'] = input("Enter selection conditions (S, comma-separated characters): ").split(',')
    phi['N'] = list(map(int, input("Enter number of grouping variables (N, comma-separated integers): ").split(',')))
    phi['V'] = input("Enter group by attributes (V, comma-separated characters): ").split(',')
    phi['F'] = input("Enter aggregate functions (F, comma-separated characters): ").split(',')
    phi['sigma'] = input("Enter Conditions in such that (sigma, comma-separated characters): ").split(',')



    

    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    
    
    _global = []
    
    for row in cur:
        if row['quant'] > 10:
            _global.append(row)
    
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    
