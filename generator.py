import subprocess


def main():
    """

    
    This is the generator code. It should take in the MF structure and generate the code
    needed to run the query. That generated code should be saved to a 
    file (e.g. _generated.py) and then run.
    """

    body = """

    S = input("Enter elements separated by commas: ").split(',')
    S = [col.strip() for col in S]
    print(S)  

    #n = int(input("Enter number of grouping variables:"))
    #print(n)

    #V = input("Enter group by attributes:")
    #V = V.split(',')  
    #print(V)

    #F = input("Enter aggregate functions")
    #F = F.split(',')  
    #print(F)  

    #sig = input("Enter Such that phrases")
    #sig = sig.split(',')  
    #print(sig)  

    #G = input("Enter having clause phrases or enter none if you dont have any: ")
    #G = G.split(',')  
    #print(G)  
    
 # Construct the dynamic SQL query
    column_string = ", ".join(S)  # Format as "col1, col2, col3"
    query_string = f"SELECT {column_string} FROM sales"

    try:
        # Execute the query
        cur.execute(query_string)
        rows = cur.fetchall()

        # Store all rows in _global
        _global.extend(rows)

    except psycopg2.Error as e:
        print("An error occurred while executing the query:", e)

    finally:
        # Ensure the cursor and connection are closed
        cur.close()
        conn.close()

    
    """


    # Note: The f allows formatting with variables.
    #       Also, note the indentation is preserved.
    tmp = f"""
import os
import psycopg2
import psycopg2.extras
import tabulate
from dotenv import load_dotenv

# DO NOT EDIT THIS FILE, IT IS GENERATED BY generator.py

def query():
    load_dotenv()

    user = os.getenv('USER')
    password = os.getenv('PASSWORD')
    dbname = os.getenv('DBNAME')

    conn = psycopg2.connect("dbname="+dbname+" user="+user+" password="+password,
                            cursor_factory=psycopg2.extras.DictCursor)
    cur = conn.cursor()
    cur.execute("SELECT * FROM sales")
    
    _global = []
    {body}
    
    return tabulate.tabulate(_global,
                        headers="keys", tablefmt="psql")

def main():
    print(query())
    
if "__main__" == __name__:
    main()
    """

    # Write the generated code to a file
    open("_generated.py", "w").write(tmp)
    # Execute the generated code
    subprocess.run(["python", "_generated.py"])


if "__main__" == __name__:
    main()
